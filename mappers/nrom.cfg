# NROM 256 cartridge with 32KiB PRG ROM and 8KiB CHR ROM

MEMORY { #memory map
    # ZEROPAGE $00-$FF in CPU internal RAM
    ZP:
        start = $0,
        size = $0100,
        type = rw;
    # HEADER first 16 bytes of ROM file
    HEADER:
        start = 0,
        size = $10,
        type = ro,
        file = %O,
        fill = yes,
        fillval = $00;
    # Stack in CPU internal RAM
    STACK:
        start = $0100,
        size = $0100,
        type = rw;
    # data to copy to OAM using DMA, in CPU internal RAM
    OAMRAM:
        start = $0200,
        size = $0100,
        type = rw,
        define = yes;
    # Rest of CPU internal RAM
    RAM:
        start = $0300,
        size = $0500,
        type = rw;
    # PRG ROM, addressable by CPU, 32KiB in ROM file
    ROM:
        start = $8000,
        size = $8000,
        type = ro,
        file = %O,
        fill = yes,
        fillval = $00;
    # CHR ROM, non addressable by CPU, 8KiB in ROM file
    CHR:
        start = $0000,
        size = $2000,
        type = ro,
        file = %O,
        fill = yes,
        fillval = $00;
}

SEGMENTS { # segments
    HEADER:
        load = HEADER,
        type = ro;
    ZEROPAGE:
        load = ZP,
        type = zp;
    STACK:
        load = STACK,
        type = bss,
        define = yes,
        optional = yes;
    OAMRAM:
        load = OAMRAM,
        type = bss,
        define = yes,
        optional = yes;
    BSS:
        load = RAM,
        type = bss,
        define = yes;
    CODE:
        load = ROM,
        type = ro;
    RODATA:
        load = ROM,
        type = ro;
    VECTORS:
        load = ROM,
        start = $FFFA,
        type = ro;
    CHRROM:
        load = CHR,
        type = ro;
}

FILES {
    %O:
        format = bin;
}

SYMBOLS {
    # Mapper number
    __MAPPERNUM__:
        addrsize = zp,
        type = weak,
        value = $00;
    # Mapper plane (only first nibble)
    __MAPPERPLN__:
        addrsize = zp,
        type = weak,
        value = $0;
    # Submapper number (only first nibble)
    __SUBMAPPER__:
        addrsize = zp,
        type = weak,
        value = $0;
    # PRG ROM size in 16KiB units (LSB) 0-7
    __PRGSIZELO__:
        addrsize = zp,
        type = weak,
        value = $02;
    # PRG ROM size in 16KiB units (MSB - only first nibble) 8-11
    __PRGSIZEHI__:
        addrsize = zp,
        type = weak,
        value = $00;
    # PRG RAM shift size (only first nibble)
    __PRGRAMSH__:
        addrsize = zp,
        type = weak,
        value = $00;
    # PRG NV RAM shift size (only first nibble)
    __PRGNVRAMSH__:
        addrsize = zp,
        type = weak,
        value = $00;
    # CHR ROM size in 8KiB units (LSB) 0-7
    __CHRSIZELO__:
        addrsize = zp,
        type = weak,
        value = $01;
    # CHR ROM size in 8KiB units (MSB - only first nibble) 8-11
    __CHRSIZEHI__:
        addrsize = zp,
        type = weak,
        value = $00;
    # CHR RAM shift size (only first nibble)
    __CHRRAMSH__:
        addrsize = zp,
        type = weak,
        value = $00;
    # CHR NV RAM shift size (only first nibble)
    __CHRNVRAMSH__:
        addrsize = zp,
        type = weak,
        value = $00;
}